// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"framework-auto-aprov-go/pkg/config"
	"framework-auto-aprov-go/pkg/db"
	"framework-auto-aprov-go/pkg/http"
	"framework-auto-aprov-go/pkg/http/handler"
	repository4 "framework-auto-aprov-go/pkg/services/auto_Aprov_Omnitok/repository"
	usecase4 "framework-auto-aprov-go/pkg/services/auto_Aprov_Omnitok/usecase"
	repository3 "framework-auto-aprov-go/pkg/services/rol/repository"
	usecase3 "framework-auto-aprov-go/pkg/services/rol/usecase"
	repository2 "framework-auto-aprov-go/pkg/services/rol_usuario/repository"
	usecase2 "framework-auto-aprov-go/pkg/services/rol_usuario/usecase"
	"framework-auto-aprov-go/pkg/services/user/repository"
	"framework-auto-aprov-go/pkg/services/user/usecase"
)

// Injectors from wire.go:

func InitializeAPI(cfg config.Config) (*http.ServerHTTP, error) {
	gormDB, err := db.ConnectDatabase(cfg)
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(gormDB)
	userUseCase := usecase.NewUserUseCase(userRepository)
	rol_UsuarioRepository := repository2.NewRol_UsuarioRepository(gormDB)
	rol_UsuarioUseCase := usecase2.NewRol_UsuarioUseCase(rol_UsuarioRepository)
	userHandler := handler.NewUserHandler(userUseCase, rol_UsuarioUseCase)
	rolRepository := repository3.NewRolRepository(gormDB)
	rolUseCase := usecase3.NewRolUseCase(rolRepository)
	rolHandler := handler.NewRolHandler(rolUseCase)
	auto_Aprov_OmnitokRepository := repository4.NewAuto_Aprov_OmnitokRepository(gormDB)
	auto_Aprov_OmnitokUseCase := usecase4.NewAuto_Aprov_OmnitokUseCase(auto_Aprov_OmnitokRepository)
	auto_Aprov_OmnitokHandler := handler.NewAuto_Aprov_OmnitokHandler(auto_Aprov_OmnitokUseCase)
	serverHTTP := http.NewServerHTTP(userHandler, rolHandler, auto_Aprov_OmnitokHandler)
	return serverHTTP, nil
}
